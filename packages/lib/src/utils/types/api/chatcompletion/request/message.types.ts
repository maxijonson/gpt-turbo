/**
 * A `system`-related message in OpenAI's chat format.
 */
export interface ChatCompletionRequestSystemMessage {
    /**
     * The role of the messages author, in this case `system`.
     */
    role: "system";

    /**
     * The contents of the system message.
     */
    content: string;

    /**
     * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     */
    name?: string;
}

/**
 * A `user`-related message in OpenAI's chat format.
 */
export interface ChatCompletionRequestUserMessage {
    /**
     * The role of the messages author, in this case `user`.
     */
    role: "user";

    /**
     * The contents of the user message.
     */
    content: string;

    /**
     * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     */
    name?: string;
}

/**
 * A function call by the assistant.
 */
export interface ChatCompletionRequestAssistantMessageFunctionCall {
    /**
     * The name of the function to call.
     */
    name: string;

    /**
     * The arguments to call the function with, as generated by the model in JSON format.
     * Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema.
     * Validate the arguments in your code before calling your function.
     */
    arguments: string;
}

/**
 * A function tool call by the assistant.
 */
export interface ChatCompletionRequestAssistantMessageFunctionToolCall {
    /**
     * The ID of the tool call.
     */
    id: string;

    /**
     * The type of the tool. In this case, `function`.
     */
    type: "function";

    /**
     * The function that the model called.
     */
    function: ChatCompletionRequestAssistantMessageFunctionCall;
}

/**
 * A tool call by the assistant with a custom tool.
 *
 * @remarks
 * This type was created in an attempt to anticipate future tool types that may not be supported in this version of the library.
 */
export interface ChatCompletionRequestAssistantMessageOtherToolCall {
    /**
     * The ID of the tool call.
     */
    id: string;

    /**
     * The type of the tool. In this case, `function`.
     */
    type: string;
}

/**
 * A tool call by the assistant.
 */
export type ChatCompletionRequestAssistantMessageToolCall =
    | ChatCompletionRequestAssistantMessageFunctionToolCall
    | ChatCompletionRequestAssistantMessageOtherToolCall;

/**
 * An `assistant`-related message in OpenAI's chat format.
 */
export interface ChatCompletionRequestAssistantMessage {
    /**
     * The role of the messages author, in this case `assistant`.
     */
    role: "assistant";

    /**
     * The contents of the assistant message.
     */
    content: string;

    /**
     * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     */
    name?: string;

    /**
     * The tool calls generated by the model, such as function calls.
     */
    tool_calls?: ChatCompletionRequestAssistantMessageToolCall[];

    /**
     * The name and arguments of a function that should be called, as generated by the model.
     *
     * @deprecated
     * Deprecated and replaced by `tool_calls`.
     */
    function_call?: ChatCompletionRequestAssistantMessageFunctionCall;
}

/**
 * A `tool`-related message in OpenAI's chat format.
 */
export interface ChatCompletionRequestToolMessage {
    /**
     * The role of the messages author, in this case `tool`.
     */
    role: "tool";

    /**
     * The contents of the tool message.
     */
    content: string;

    /**
     * Tool call that this message is responding to.
     */
    tool_call_id: string;
}

/**
 * A message in OpenAI's chat format.
 *
 * @see {@link https://platform.openai.com/docs/api-reference/chat/create#chat/create-messages Create Chat Completion Request Body - messages}
 */
export type ChatCompletionRequestMessage =
    | ChatCompletionRequestSystemMessage
    | ChatCompletionRequestUserMessage
    | ChatCompletionRequestAssistantMessage
    | ChatCompletionRequestToolMessage;

/**
 * Supported values for the `role` property of a message.
 */
export type ChatCompletionRequestMessageRole =
    ChatCompletionRequestMessage["role"];
