import { Box, Group, Title, Anchor, Text } from "@mantine/core";
import { FaQuestion } from "react-icons/fa";
import CodeEditor from "./CodeEditor";
import TippedActionIcon from "./TippedActionIcon";
import { useDisclosure } from "@mantine/hooks";
import useCallableFunctionForm from "../hooks/useCallableFunctionForm";
import React from "react";

const CallableFunctionFormCode = () => {
    const form = useCallableFunctionForm();
    const [showHelp, { toggle: toggleHelp }] = useDisclosure();

    const parameters = React.useMemo(() => {
        const currentParameters = form.values.parameters ?? {
            type: "object",
            properties: {},
            required: [],
        };
        const parameters = Object.entries(
            currentParameters.properties ?? {}
        ).map(([name, jsonSchema]: [string, any]) => {
            const type = (() => {
                if (jsonSchema.type) return jsonSchema.type as string;
                if (jsonSchema.enum) return "enum";
                if (jsonSchema.const) return "const";
                return "unknown";
            })();
            const required = (currentParameters.required ?? []).includes(name);
            return { name, required, type };
        });

        return parameters
            .sort((a, b) => {
                if (a.required && !b.required) return -1;
                if (!a.required && b.required) return 1;
                return 0;
            })
            .map(
                ({ name, type, required }) =>
                    `${name}${required ? "" : "?"}: ${type}`
            );
    }, [form.values.parameters]);

    return (
        <Box>
            <Group spacing="xs">
                <Title order={3}>Code</Title>
                <TippedActionIcon
                    tip="What is this?"
                    onClick={toggleHelp}
                    variant={showHelp ? "filled" : "transparent"}
                    size="xs"
                >
                    <FaQuestion size={12} />
                </TippedActionIcon>
            </Group>
            {showHelp && (
                <Box>
                    <Text>
                        You may write an optionnal JavaScript function{" "}
                        <Text span underline weight="bold">
                            body
                        </Text>{" "}
                        here that will be called with the parameters generated
                        by the assistant. Function parameters are available as
                        global variables with the same name as the parameter. If
                        you omit the function code, you'll only be shown the
                        name of the function used by the assistant and its
                        parameters, if any.
                    </Text>
                    <Text>
                        The function must return a value (of any type). This is
                        not validated by the web app and could lead to
                        unexpected results if nothing is returned.{" "}
                        <Text span weight="bold">
                            This code's return value will be injected
                            (stringified) in a function message's content
                        </Text>{" "}
                        so that it can be used in the conversation by the
                        assistant. Behind the scenes, the web app wraps this
                        code in a{" "}
                        <Anchor
                            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"
                            target="_blank"
                        >
                            Function
                        </Anchor>{" "}
                        object, calls it with the parameters generated by the
                        assistant, grabs the return value and sends it to the
                        assistant to get a message back from it.
                    </Text>
                </Box>
            )}
            <CodeEditor
                value={form.values.code}
                onChange={(value) => form.setFieldValue("code", value)}
                name={form.values.name}
                parameters={parameters}
            />
        </Box>
    );
};

export default CallableFunctionFormCode;
